class Solution {
    public double findMedianSortedArrays(int[] nums1, int[] nums2) {
        
        if(nums2.length < nums1.length)
            return findMedianSortedArrays(nums2, nums1);
        
        int size1 = nums1.length;
        int size2 = nums2.length;
        
        int low = 0;
        int high = size1;
        
        while(low <= high)
        {
            
            int mid1 = (low + high) >> 1;
            int mid2 = (size1 + size2 + 1) /2 - mid1;
            
            int l1 = (mid1 == 0) ? Integer.MIN_VALUE : nums1[mid1-1];
            int l2 = (mid2 == 0) ? Integer.MIN_VALUE : nums2[mid2-1];
            
            int r1 = (mid1 == size1) ? Integer.MAX_VALUE : nums1[mid1];
            int r2 = (mid2 == size2) ? Integer.MAX_VALUE : nums2[mid2];
            
            
            if(l1<=r2 && l2<=r1)
            {
                if((size1+size2)%2 == 0)
                    return ( (Math.max(l1,l2) + Math.min(r1,r2) )/2.0 );
                    
                    else
                   return Math.max(l1,l2)*1.0;
                                     
            }
            
            else if(l1 > r2)
                  high = mid1-1;
                            
            else
                low = mid1+1;
                            
        }
        return 0.0d;
    }
}
