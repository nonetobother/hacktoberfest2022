class Solution {
   	public String minWindow(String str, String t) {
		String ans="";
			
		else {
		HashMap<Character, Integer> map = new HashMap<Character, Integer>();
		for(int i=0; i<t.length(); i++) {
				map.put(t.charAt(i), map.getOrDefault(t.charAt(i), 0)+1);
			
		}
		int i=0, j=0, min = Integer.MAX_VALUE, size = str.length();
		int count = map.size();
		while(j<size && i<=j) {
			char ch = str.charAt(j);
			if(map.containsKey(ch)) {
		
				map.put(ch, map.get(ch)-1);
				
				if(map.get(ch) == 0) {
					count--;
				}
			}
			if(count != 0)
				j++;
			
			else if(count == 0) {
				if(j-i+1 < min) {
					min = Math.min(min, j-i+1);
					ans = str.substring(i,j+1);	
				}
			
				while(count != 1) {
				
				if(map.containsKey(str.charAt(i)) == false) {
					i++;
					if(j-i+1 < min) {
						min = Math.min(min, j-i+1);
						ans = str.substring(i,j+1);	
					}
				}
				
				else if(map.containsKey(str.charAt(i)) == true) {
					
						int c11 = map.get(str.charAt(i));
						
						if(c11<0) {
							map.put(str.charAt(i), c11+1);
							i++;
							if(j-i+1 < min) {
								min = Math.min(min, j-i+1);
								ans = str.substring(i,j+1);	
							}
						}
						else {
							count = count+1;
							map.put(str.charAt(i), c11+1);
							i++;
						}		
					}
				}
				
				j++;
			}
		}
		
		
		}
		return ans;
	}
}
